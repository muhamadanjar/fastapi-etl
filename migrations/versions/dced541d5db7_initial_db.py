"""initial db

Revision ID: dced541d5db7
Revises: 
Create Date: 2025-07-26 11:11:23.178721

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'dced541d5db7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('change_log',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('table_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('record_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('operation', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('old_values', sa.JSON(), nullable=True),
    sa.Column('new_values', sa.JSON(), nullable=True),
    sa.Column('changed_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('change_reason', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('changed_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='audit'
    )
    op.create_index(op.f('ix_audit_change_log_id'), 'change_log', ['id'], unique=False, schema='audit')
    op.create_table('data_dictionary',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('entity_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('field_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('field_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('field_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('business_rules', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sample_values', sa.ARRAY(sa.String()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='config'
    )
    op.create_index(op.f('ix_config_data_dictionary_id'), 'data_dictionary', ['id'], unique=False, schema='config')
    op.create_table('system_config',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('config_category', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('config_key', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('config_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('config_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='config'
    )
    op.create_index(op.f('ix_config_system_config_id'), 'system_config', ['id'], unique=False, schema='config')
    op.create_table('etl_jobs',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('job_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('job_type', sa.Enum('EXTRACT', 'TRANSFORM', 'LOAD', 'VALIDATE', name='jobtype'), nullable=True),
    sa.Column('job_category', sa.Enum('FILE_PROCESSING', 'DATA_CLEANING', 'AGGREGATION', 'VALIDATION', 'EXPORT', name='jobcategory'), nullable=True),
    sa.Column('source_type', sa.Enum('FILE', 'API', 'DATABASE', 'STREAM', name='sourcetype'), nullable=True),
    sa.Column('target_schema', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('target_table', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('job_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('schedule_expression', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='etl_control'
    )
    op.create_index(op.f('ix_etl_control_etl_jobs_id'), 'etl_jobs', ['id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_etl_jobs_is_active'), 'etl_jobs', ['is_active'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_etl_jobs_job_category'), 'etl_jobs', ['job_category'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_etl_jobs_job_name'), 'etl_jobs', ['job_name'], unique=True, schema='etl_control')
    op.create_index(op.f('ix_etl_control_etl_jobs_job_type'), 'etl_jobs', ['job_type'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_etl_jobs_source_type'), 'etl_jobs', ['source_type'], unique=False, schema='etl_control')
    op.create_table('quality_rules',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('rule_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('rule_type', sa.Enum('COMPLETENESS', 'UNIQUENESS', 'VALIDITY', 'CONSISTENCY', 'ACCURACY', 'TIMELINESS', 'REFERENTIAL_INTEGRITY', name='qualityruletype'), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('field_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('rule_expression', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('error_threshold', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='etl_control'
    )
    op.create_index(op.f('ix_etl_control_quality_rules_entity_type'), 'quality_rules', ['entity_type'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_rules_field_name'), 'quality_rules', ['field_name'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_rules_id'), 'quality_rules', ['id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_rules_is_active'), 'quality_rules', ['is_active'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_rules_rule_name'), 'quality_rules', ['rule_name'], unique=True, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_rules_rule_type'), 'quality_rules', ['rule_type'], unique=False, schema='etl_control')
    op.create_table('aggregated_data',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('aggregation_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('aggregation_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('dimension_keys', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('measure_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('time_period', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='processed'
    )
    op.create_index(op.f('ix_processed_aggregated_data_aggregation_name'), 'aggregated_data', ['aggregation_name'], unique=False, schema='processed')
    op.create_index(op.f('ix_processed_aggregated_data_aggregation_type'), 'aggregated_data', ['aggregation_type'], unique=False, schema='processed')
    op.create_index(op.f('ix_processed_aggregated_data_batch_id'), 'aggregated_data', ['batch_id'], unique=False, schema='processed')
    op.create_index(op.f('ix_processed_aggregated_data_id'), 'aggregated_data', ['id'], unique=False, schema='processed')
    op.create_table('entities',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('entity_key', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('entity_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('source_files', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='processed'
    )
    op.create_index(op.f('ix_processed_entities_entity_key'), 'entities', ['entity_key'], unique=False, schema='processed')
    op.create_index(op.f('ix_processed_entities_entity_type'), 'entities', ['entity_type'], unique=False, schema='processed')
    op.create_index(op.f('ix_processed_entities_id'), 'entities', ['id'], unique=False, schema='processed')
    op.create_table('file_registry',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('file_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('file_type', sa.Enum('CSV', 'EXCEL', 'JSON', 'XML', 'API', name='filetypeenum'), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('source_system', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('upload_date', sa.DateTime(), nullable=False),
    sa.Column('processing_status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='processingstatus'), nullable=False),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('file_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='raw_data'
    )
    op.create_index(op.f('ix_raw_data_file_registry_id'), 'file_registry', ['id'], unique=False, schema='raw_data')
    op.create_table('lookup_tables',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('lookup_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('lookup_key', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('lookup_value', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('lookup_category', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='staging'
    )
    op.create_index(op.f('ix_staging_lookup_tables_id'), 'lookup_tables', ['id'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_lookup_tables_is_active'), 'lookup_tables', ['is_active'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_lookup_tables_lookup_category'), 'lookup_tables', ['lookup_category'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_lookup_tables_lookup_key'), 'lookup_tables', ['lookup_key'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_lookup_tables_lookup_name'), 'lookup_tables', ['lookup_name'], unique=False, schema='staging')
    op.create_table('field_mappings',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('source_entity', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('source_field', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('target_entity', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('target_field', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('mapping_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('mapping_expression', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('data_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('default_value', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='transformation'
    )
    op.create_index(op.f('ix_transformation_field_mappings_id'), 'field_mappings', ['id'], unique=False, schema='transformation')
    op.create_table('transformation_rules',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('rule_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('source_format', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('target_format', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('transformation_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('rule_logic', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rule_parameters', sa.JSON(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='transformation'
    )
    op.create_index(op.f('ix_transformation_transformation_rules_id'), 'transformation_rules', ['id'], unique=False, schema='transformation')
    op.create_table('users',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('job_executions',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('job_id', sa.Uuid(), nullable=False),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('RUNNING', 'SUCCESS', 'FAILED', 'CANCELLED', 'PENDING', 'TIMEOUT', name='executionstatus'), nullable=False),
    sa.Column('records_processed', sa.Integer(), nullable=True),
    sa.Column('records_successful', sa.Integer(), nullable=True),
    sa.Column('records_failed', sa.Integer(), nullable=True),
    sa.Column('execution_log', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['etl_control.etl_jobs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='etl_control'
    )
    op.create_index(op.f('ix_etl_control_job_executions_batch_id'), 'job_executions', ['batch_id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_job_executions_id'), 'job_executions', ['id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_job_executions_job_id'), 'job_executions', ['job_id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_job_executions_status'), 'job_executions', ['status'], unique=False, schema='etl_control')
    op.create_table('entity_relationships',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('entity_from', sa.Uuid(), nullable=False),
    sa.Column('entity_to', sa.Uuid(), nullable=False),
    sa.Column('relationship_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('relationship_strength', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('relationship_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['entity_from'], ['processed.entities.id'], ),
    sa.ForeignKeyConstraint(['entity_to'], ['processed.entities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='processed'
    )
    op.create_index(op.f('ix_processed_entity_relationships_id'), 'entity_relationships', ['id'], unique=False, schema='processed')
    op.create_table('column_structure',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('file_id', sa.Uuid(), nullable=False),
    sa.Column('column_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('column_position', sa.Integer(), nullable=True),
    sa.Column('data_type', sa.Enum('STRING', 'NUMBER', 'DATE', 'BOOLEAN', 'EMAIL', 'PHONE', 'URL', 'JSON', 'UNKNOWN', name='datatype'), nullable=False),
    sa.Column('sample_values', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('null_count', sa.Integer(), nullable=True),
    sa.Column('unique_count', sa.Integer(), nullable=True),
    sa.Column('min_length', sa.Integer(), nullable=True),
    sa.Column('max_length', sa.Integer(), nullable=True),
    sa.Column('total_count', sa.Integer(), nullable=True),
    sa.Column('distinct_count', sa.Integer(), nullable=True),
    sa.Column('completeness_ratio', sa.Float(), nullable=True),
    sa.Column('uniqueness_ratio', sa.Float(), nullable=True),
    sa.Column('common_patterns', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('validation_rules', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['raw_data.file_registry.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='raw_data'
    )
    op.create_index(op.f('ix_raw_data_column_structure_id'), 'column_structure', ['id'], unique=False, schema='raw_data')
    op.create_table('raw_records',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('file_id', sa.Uuid(), nullable=False),
    sa.Column('sheet_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('row_number', sa.Integer(), nullable=True),
    sa.Column('column_mapping', sa.JSON(), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('data_hash', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.Column('validation_status', sa.Enum('UNVALIDATED', 'VALID', 'INVALID', 'NEEDS_REVIEW', name='validationstatus'), nullable=False),
    sa.Column('validation_errors', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['raw_data.file_registry.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='raw_data'
    )
    op.create_index(op.f('ix_raw_data_raw_records_id'), 'raw_records', ['id'], unique=False, schema='raw_data')
    op.create_table('data_lineage',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('source_entity', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('source_field', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('target_entity', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('target_field', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('transformation_applied', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('execution_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['execution_id'], ['etl_control.job_executions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='audit'
    )
    op.create_index(op.f('ix_audit_data_lineage_id'), 'data_lineage', ['id'], unique=False, schema='audit')
    op.create_table('quality_check_results',
    sa.Column('check_result', sa.Enum('PASS', 'FAIL', 'WARNING', 'SKIP', 'ERROR', name='qualitycheckresult'), nullable=False),
    sa.Column('records_checked', sa.Integer(), nullable=True),
    sa.Column('records_passed', sa.Integer(), nullable=True),
    sa.Column('records_failed', sa.Integer(), nullable=True),
    sa.Column('failure_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('check_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('rule_id', sa.Uuid(), nullable=False),
    sa.Column('execution_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['execution_id'], ['etl_control.job_executions.id'], ),
    sa.ForeignKeyConstraint(['rule_id'], ['etl_control.quality_rules.id'], ),
    sa.PrimaryKeyConstraint('check_id'),
    schema='etl_control'
    )
    op.create_index(op.f('ix_etl_control_quality_check_results_check_result'), 'quality_check_results', ['check_result'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_check_results_execution_id'), 'quality_check_results', ['execution_id'], unique=False, schema='etl_control')
    op.create_index(op.f('ix_etl_control_quality_check_results_rule_id'), 'quality_check_results', ['rule_id'], unique=False, schema='etl_control')
    op.create_table('standardized_data',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('source_file_id', sa.Uuid(), nullable=False),
    sa.Column('source_record_id', sa.Uuid(), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('standardized_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('quality_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('transformation_rules_applied', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['source_file_id'], ['raw_data.file_registry.id'], ),
    sa.ForeignKeyConstraint(['source_record_id'], ['raw_data.raw_records.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='staging'
    )
    op.create_index(op.f('ix_staging_standardized_data_batch_id'), 'standardized_data', ['batch_id'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_standardized_data_entity_type'), 'standardized_data', ['entity_type'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_standardized_data_id'), 'standardized_data', ['id'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_standardized_data_source_file_id'), 'standardized_data', ['source_file_id'], unique=False, schema='staging')
    op.create_index(op.f('ix_staging_standardized_data_source_record_id'), 'standardized_data', ['source_record_id'], unique=False, schema='staging')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_staging_standardized_data_source_record_id'), table_name='standardized_data', schema='staging')
    op.drop_index(op.f('ix_staging_standardized_data_source_file_id'), table_name='standardized_data', schema='staging')
    op.drop_index(op.f('ix_staging_standardized_data_id'), table_name='standardized_data', schema='staging')
    op.drop_index(op.f('ix_staging_standardized_data_entity_type'), table_name='standardized_data', schema='staging')
    op.drop_index(op.f('ix_staging_standardized_data_batch_id'), table_name='standardized_data', schema='staging')
    op.drop_table('standardized_data', schema='staging')
    op.drop_index(op.f('ix_etl_control_quality_check_results_rule_id'), table_name='quality_check_results', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_check_results_execution_id'), table_name='quality_check_results', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_check_results_check_result'), table_name='quality_check_results', schema='etl_control')
    op.drop_table('quality_check_results', schema='etl_control')
    op.drop_index(op.f('ix_audit_data_lineage_id'), table_name='data_lineage', schema='audit')
    op.drop_table('data_lineage', schema='audit')
    op.drop_index(op.f('ix_raw_data_raw_records_id'), table_name='raw_records', schema='raw_data')
    op.drop_table('raw_records', schema='raw_data')
    op.drop_index(op.f('ix_raw_data_column_structure_id'), table_name='column_structure', schema='raw_data')
    op.drop_table('column_structure', schema='raw_data')
    op.drop_index(op.f('ix_processed_entity_relationships_id'), table_name='entity_relationships', schema='processed')
    op.drop_table('entity_relationships', schema='processed')
    op.drop_index(op.f('ix_etl_control_job_executions_status'), table_name='job_executions', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_job_executions_job_id'), table_name='job_executions', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_job_executions_id'), table_name='job_executions', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_job_executions_batch_id'), table_name='job_executions', schema='etl_control')
    op.drop_table('job_executions', schema='etl_control')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_transformation_transformation_rules_id'), table_name='transformation_rules', schema='transformation')
    op.drop_table('transformation_rules', schema='transformation')
    op.drop_index(op.f('ix_transformation_field_mappings_id'), table_name='field_mappings', schema='transformation')
    op.drop_table('field_mappings', schema='transformation')
    op.drop_index(op.f('ix_staging_lookup_tables_lookup_name'), table_name='lookup_tables', schema='staging')
    op.drop_index(op.f('ix_staging_lookup_tables_lookup_key'), table_name='lookup_tables', schema='staging')
    op.drop_index(op.f('ix_staging_lookup_tables_lookup_category'), table_name='lookup_tables', schema='staging')
    op.drop_index(op.f('ix_staging_lookup_tables_is_active'), table_name='lookup_tables', schema='staging')
    op.drop_index(op.f('ix_staging_lookup_tables_id'), table_name='lookup_tables', schema='staging')
    op.drop_table('lookup_tables', schema='staging')
    op.drop_index(op.f('ix_raw_data_file_registry_id'), table_name='file_registry', schema='raw_data')
    op.drop_table('file_registry', schema='raw_data')
    op.drop_index(op.f('ix_processed_entities_id'), table_name='entities', schema='processed')
    op.drop_index(op.f('ix_processed_entities_entity_type'), table_name='entities', schema='processed')
    op.drop_index(op.f('ix_processed_entities_entity_key'), table_name='entities', schema='processed')
    op.drop_table('entities', schema='processed')
    op.drop_index(op.f('ix_processed_aggregated_data_id'), table_name='aggregated_data', schema='processed')
    op.drop_index(op.f('ix_processed_aggregated_data_batch_id'), table_name='aggregated_data', schema='processed')
    op.drop_index(op.f('ix_processed_aggregated_data_aggregation_type'), table_name='aggregated_data', schema='processed')
    op.drop_index(op.f('ix_processed_aggregated_data_aggregation_name'), table_name='aggregated_data', schema='processed')
    op.drop_table('aggregated_data', schema='processed')
    op.drop_index(op.f('ix_etl_control_quality_rules_rule_type'), table_name='quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_rules_rule_name'), table_name='quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_rules_is_active'), table_name='quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_rules_id'), table_name='quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_rules_field_name'), table_name='quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_quality_rules_entity_type'), table_name='quality_rules', schema='etl_control')
    op.drop_table('quality_rules', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_source_type'), table_name='etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_job_type'), table_name='etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_job_name'), table_name='etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_job_category'), table_name='etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_is_active'), table_name='etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_etl_control_etl_jobs_id'), table_name='etl_jobs', schema='etl_control')
    op.drop_table('etl_jobs', schema='etl_control')
    op.drop_index(op.f('ix_config_system_config_id'), table_name='system_config', schema='config')
    op.drop_table('system_config', schema='config')
    op.drop_index(op.f('ix_config_data_dictionary_id'), table_name='data_dictionary', schema='config')
    op.drop_table('data_dictionary', schema='config')
    op.drop_index(op.f('ix_audit_change_log_id'), table_name='change_log', schema='audit')
    op.drop_table('change_log', schema='audit')
    # ### end Alembic commands ###
